name: Build oj-libjdwp
on: [push]
jobs:
  build:
    name: Build ${{ matrix.os }}-${{ matrix.abi }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        abi:
          - arm64-v8a
          - armeabi-v7a
          - x86
          - x86_64
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Install Linux packages
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install cmake make ninja-build python3

      - name: Install Windows packages
        if: matrix.os == 'windows-latest'
        run: |
          choco install cmake ninja python3

      - name: Install macOS packages
        if: matrix.os == 'macos-latest'
        run: brew install cmake ninja python3

      - name: Install JDK (Linux/Windows)
        if: matrix.os != 'macos-latest'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 8

      - name: Install JDK (MacOS)
        if: matrix.os == 'macos-latest'
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 8

      - name: Setup NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r27c

      - name: Set platform-specific variables
        id: platform-vars
        shell: bash
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            echo "ndk_platform=linux-x86_64" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            echo "ndk_platform=windows-x86_64" >> $GITHUB_OUTPUT
          else
            echo "ndk_platform=darwin-x86_64" >> $GITHUB_OUTPUT
          fi

      - name: CMake Configure
        env:
          NDK: ${{ steps.setup-ndk.outputs.ndk-path }}
        shell: bash
        run: |
          cmake -B build -GNinja \
            -DCMAKE_TOOLCHAIN_FILE="$NDK/build/cmake/android.toolchain.cmake" \
            -DANDROID_PLATFORM=android-26 \
            -DANDROID_ABI=${{ matrix.abi }} \
            -DCMAKE_SYSTEM_NAME=Android \
            -DANDROID_ARM_NEON=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=build/install \
            -DJava_ROOT="${JAVA_HOME_8_X64}" \
            .

      - name: Build
        id: build-step
        continue-on-error: true
        env:
          NDK: ${{ steps.setup-ndk.outputs.ndk-path }}
        shell: bash
        run: |
          export PATH="$NDK/toolchains/llvm/prebuilt/${{ steps.platform-vars.outputs.ndk_platform }}/bin:$PATH"
          ninja -C build

      # Capture and upload build logs on failure
      - name: Capture build logs
        if: steps.build-step.outcome == 'failure'
        shell: bash
        run: |
          mkdir -p build-logs

          # Copy CMake logs
          if [ -d "build/CMakeFiles" ]; then
            cp build/CMakeFiles/CMakeError.log build-logs/ 2>/dev/null || true
            cp build/CMakeFiles/CMakeOutput.log build-logs/ 2>/dev/null || true
          fi

          # Find and copy external project logs
          find build -name "*.log" -o -name "config.log" -o -name "CMakeError.log" -o -name "CMakeOutput.log" | xargs -I{} cp {} build-logs/ 2>/dev/null || true

          # Create a summary of error logs
          cd build-logs
          echo "=== Build Log Summary ===" > error-summary.txt
          grep -r "error:" --include="*.log" . >> error-summary.txt 2>/dev/null || true
          grep -r "CMake Error" --include="*.log" . >> error-summary.txt 2>/dev/null || true
          grep -r "configure: error" --include="*.log" . >> error-summary.txt 2>/dev/null || true
          echo "Log files captured: $(ls | wc -l)" >> error-summary.txt

      - name: Upload build logs
        if: steps.build-step.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.os }}-${{ matrix.abi }}
          path: build-logs/

      - name: Check build status
        if: steps.build-step.outcome == 'failure'
        shell: bash
        run: exit 1

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: oj-libjdwp-${{ matrix.abi }}-${{ matrix.os }}
          path: |
            build/*.jar
            build/*.so
            build/*.a
            build/libiconv/lib/*.so
            build/libiconv/lib/*.a
