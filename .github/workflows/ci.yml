name: Build oj-libjdwp
on: [push]
jobs:
  build:
    name: Build ${{ matrix.os }}-${{ matrix.abi }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        abi:
          - arm64-v8a
          - armeabi-v7a
          - x86
          - x86_64
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Install Linux packages
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install cmake make ninja-build python3

      - name: Install Windows packages
        if: matrix.os == 'windows-latest'
        run: |
          choco install cmake ninja python3

      - name: Install macOS packages
        if: matrix.os == 'macos-latest'
        run: brew install cmake ninja python3

      - name: Install JDK (Linux/Windows)
        if: matrix.os != 'macos-latest'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 8

      - name: Install JDK (MacOS)
        if: matrix.os == 'macos-latest'
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 8

      - name: Setup NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r27c

      - name: Set platform-specific variables
        id: platform-vars
        shell: bash
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            echo "ndk_platform=linux-x86_64" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            echo "ndk_platform=windows-x86_64" >> $GITHUB_OUTPUT
          else
            echo "ndk_platform=darwin-x86_64" >> $GITHUB_OUTPUT
          fi

      - name: CMake Configure
        env:
          NDK: ${{ steps.setup-ndk.outputs.ndk-path }}
        shell: bash
        run: |
          cmake -B build -GNinja \
            -DCMAKE_TOOLCHAIN_FILE="$NDK/build/cmake/android.toolchain.cmake" \
            -DANDROID_PLATFORM=android-26 \
            -DANDROID_ABI=${{ matrix.abi }} \
            -DCMAKE_SYSTEM_NAME=Android \
            -DANDROID_ARM_NEON=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=build/install \
            -DJava_ROOT="${JAVA_HOME_8_X64}" \
            .

      - name: Build
        id: build-step
        continue-on-error: true
        env:
          NDK: ${{ steps.setup-ndk.outputs.ndk-path }}
        shell: bash
        run: |
          export PATH="$NDK/toolchains/llvm/prebuilt/${{ steps.platform-vars.outputs.ndk_platform }}/bin:$PATH"
          ninja -C build

      - name: Print error logs
        if: steps.build-step.outcome == 'failure'
        shell: bash
        run: |
          cat build/libiconv-prefix/src/libiconv/config.log

      - name: Upload build logs
        if: steps.build-step.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.os }}-${{ matrix.abi }}
          path: build-logs/

      - name: Check build status
        if: steps.build-step.outcome == 'failure'
        shell: bash
        run: exit 1

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: oj-libjdwp-${{ matrix.abi }}-${{ matrix.os }}
          path: |
            build/*.jar
            build/*.so
            build/*.a
            build/libiconv/lib/*.so
            build/libiconv/lib/*.a

  release:
    name: Create Release
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Get version from git tag
        id: get_version
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          DATE=$(date '+%Y-%m-%d')
          echo "version=$DATE-$SHORT_SHA" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Prepare artifacts for release
        run: |
          mkdir -p release-info
          echo "# Available Artifacts" > release-info/ARTIFACTS.md
          echo "" >> release-info/ARTIFACTS.md
          echo "| Artifact | MD5 Checksum | SHA-256 Checksum |" >> release-info/ARTIFACTS.md
          echo "| -------- | ------------ | ---------------- |" >> release-info/ARTIFACTS.md

          # Create directories for checksums
          mkdir -p release-info/checksums/md5
          mkdir -p release-info/checksums/sha256

          # Generate checksums for release description
          echo "## File Checksums" > release-info/CHECKSUMS.md
          echo "" >> release-info/CHECKSUMS.md
          echo "| Artifact | MD5 Checksum | SHA-256 Checksum |" >> release-info/CHECKSUMS.md
          echo "| -------- | ------------ | ---------------- |" >> release-info/CHECKSUMS.md

          # Generate checksums for all artifacts
          find release-artifacts -type f -name "*.jar" -o -name "*.so" -o -name "*.a" | sort | while read file; do
            FILENAME=$(basename "$file")
            MD5=$(md5sum "$file" | awk '{print $1}')
            SHA256=$(sha256sum "$file" | awk '{print $1}')

            # Add to ARTIFACTS.md
            echo "| $FILENAME | \`$MD5\` | \`$SHA256\` |" >> release-info/ARTIFACTS.md

            # Add to CHECKSUMS.md
            echo "| $FILENAME | \`$MD5\` | \`$SHA256\` |" >> release-info/CHECKSUMS.md

            # Create individual checksum files
            echo "$MD5  $FILENAME" > release-info/checksums/md5/$FILENAME.md5
            echo "$SHA256  $FILENAME" > release-info/checksums/sha256/$FILENAME.sha256
          done

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: oj-libjdwp-${{ steps.get_version.outputs.version }}
          tag_name: v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          files: |
            release-info/ARTIFACTS.md
            release-info/checksums/md5/*.md5
            release-info/checksums/sha256/*.sha256
            release-artifacts/**/*.jar
            release-artifacts/**/*.so
            release-artifacts/**/*.a
          body: |
            Release of oj-libjdwp version ${{ steps.get_version.outputs.version }}

            This automated release contains pre-built binaries for:
            - arm64-v8a
            - armeabi-v7a
            - x86
            - x86_64

            Built from commit: ${{ github.sha }}

            $(cat release-info/CHECKSUMS.md)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
